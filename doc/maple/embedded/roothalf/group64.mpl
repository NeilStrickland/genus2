<html>
 <head>
 </head>
 <body>
  <pre>
    <a name="line_1"></a># This code sets up the Galois group over R(z_1,z_2) of the field
<a name="line_2"></a># extension KT generated by x[1], x[2], y[1], y[2], r[1] and r[2].
<a name="line_3"></a>
<a name="line_4"></a><span style="color:red">#@ G64 
</span><a name="line_5"></a>G64 := [
<a name="line_6"></a> 1, L, LL, LLL, M, LM, LLM, LLLM, N, LN, LLN, LLLN, MN, LMN, LLMN, LLLMN,
<a name="line_7"></a> A1, LA1, LLA1, LLLA1, MA1, LMA1, LLMA1, LLLMA1,
<a name="line_8"></a> NA1, LNA1, LLNA1, LLLNA1, MNA1, LMNA1, LLMNA1, LLLMNA1,
<a name="line_9"></a> A2, LA2, LLA2, LLLA2, MA2, LMA2, LLMA2, LLLMA2,
<a name="line_10"></a> NA2, LNA2, LLNA2, LLLNA2, MNA2, LMNA2, LLMNA2, LLLMNA2,
<a name="line_11"></a> A12, LA12, LLA12, LLLA12, MA12, LMA12, LLMA12, LLLMA12,
<a name="line_12"></a> NA12, LNA12, LLNA12, LLLNA12, MNA12, LMNA12, LLMNA12, LLLMNA12
<a name="line_13"></a>]:
<a name="line_14"></a>
<a name="line_15"></a>protect(
<a name="line_16"></a> 'A1', 'LA1', 'LLA1', 'LLLA1', 'MA1', 'LMA1', 'LLMA1', 'LLLMA1',
<a name="line_17"></a> 'NA1', 'LNA1', 'LLNA1', 'LLLNA1', 'MNA1', 'LMNA1', 'LLMNA1', 'LLLMNA1',
<a name="line_18"></a> 'A2', 'LA2', 'LLA2', 'LLLA2', 'MA2', 'LMA2', 'LLMA2', 'LLLMA2',
<a name="line_19"></a> 'NA2', 'LNA2', 'LLNA2', 'LLLNA2', 'MNA2', 'LMNA2', 'LLMNA2', 'LLLMNA2',
<a name="line_20"></a> 'A12', 'LA12', 'LLA12', 'LLLA12', 'MA12', 'LMA12', 'LLMA12', 'LLLMA12',
<a name="line_21"></a> 'NA12', 'LNA12', 'LLNA12', 'LLLNA12', 'MNA12', 'LMNA12', 'LLMNA12', 'LLLMNA12'
<a name="line_22"></a>):
<a name="line_23"></a>
<a name="line_24"></a>act_A[A1 ] := (u) -> eval(subs(r=rx,subs(r[1]=-r[1],subs(root_rule,u)))):
<a name="line_25"></a>act_A[A2 ] := (u) -> eval(subs(r=rx,subs(r[2]=-r[2],subs(root_rule,u)))):
<a name="line_26"></a>act_A[A12] := (u) -> eval(subs(r=rx,subs({r[1]=-r[1],r[2]=-r[2]},subs(root_rule,u)))):
<a name="line_27"></a>
<a name="line_28"></a><span style="color:red">#@ act_AT_rule 
</span><a name="line_29"></a>act_AT_rule := table():
<a name="line_30"></a>
<a name="line_31"></a><span style="color:red">#@ xyrstu_vars 
</span><a name="line_32"></a>xyrstu_vars := [
<a name="line_33"></a> seq(x[i],i=1..4),
<a name="line_34"></a> seq(y[i],i=1..2),
<a name="line_35"></a> seq(r[i],i=1..2),
<a name="line_36"></a> seq(s[i],i=1..16),
<a name="line_37"></a> seq(t[i],i=1..4),
<a name="line_38"></a> seq(u[i],i=1..16)
<a name="line_39"></a>];
<a name="line_40"></a>
<a name="line_41"></a>act_AT_rule[1] := {seq(a = a,a in xyrstu_vars)};
<a name="line_42"></a>
<a name="line_43"></a>act_AT_rule[L] := {
<a name="line_44"></a> x[1] = x[2], x[2] = -x[1], x[4] = -x[4], y[2] = -y[2], r[1] = r[2], r[2] = r[1],
<a name="line_45"></a> t[1] =  t[2], t[2] = -t[1], t[3] =  t[4], t[4] = -t[3],
<a name="line_46"></a> seq(s[2*i-1] = s[2*i],i=1..4), seq(s[2*i] = s[2*i-1],i=1..4),
<a name="line_47"></a> s[ 9] = s[10], s[10] =-s[ 9], s[11] = s[12], s[12] = -s[11],
<a name="line_48"></a> s[13] = -s[13], s[14] =-s[15], s[15] = -s[14], s[16] = -s[16],
<a name="line_49"></a> u[1] = u[2], u[2] = -u[1], u[3] = u[4], u[4] = -u[3], u[5] = u[6],
<a name="line_50"></a> u[6] = -u[5], u[7] = u[8], u[8] = -u[7], u[9] = u[10], u[10] = -u[9],
<a name="line_51"></a> u[11] = u[12], u[12] = -u[11], u[13] = u[14], u[14] = -u[13],
<a name="line_52"></a> u[15] = u[16], u[16] = -u[15]
<a name="line_53"></a>}:
<a name="line_54"></a>
<a name="line_55"></a>act_AT_rule[M] := {
<a name="line_56"></a> x[2] = -x[2], x[3] = -x[3], x[4] = -x[4], y[1] = -y[1],
<a name="line_57"></a> t[1] =  t[3], t[2] = -t[4], t[3] =  t[1], t[4] = -t[2],
<a name="line_58"></a> s[3] = 1/s[3], s[4] = 1/s[4],
<a name="line_59"></a> s[9] = s[11], s[10] = -s[12], s[11] = s[9], s[12] = -s[10],
<a name="line_60"></a> u[2] = -u[2], u[4] = -u[4], u[5] = -u[5], u[7] = -u[7], u[9] = u[11],
<a name="line_61"></a> u[10] = -u[12], u[11] = u[9], u[12] = -u[10], u[13] = -u[15], u[14] = u[16],
<a name="line_62"></a> u[15] = -u[13], u[16] = u[14]
<a name="line_63"></a>}:
<a name="line_64"></a>
<a name="line_65"></a>act_AT_rule[N] := {
<a name="line_66"></a> x[2] = -x[2],
<a name="line_67"></a> t[1] =  t[1], t[2] = -t[2], t[3] =  t[3], t[4] = -t[4],
<a name="line_68"></a> s[10] = -s[10], s[12] = -s[12],
<a name="line_69"></a> seq(s[i] = -s[i],i=13..16),
<a name="line_70"></a> u[2] = -u[2], u[4] = -u[4], u[6] = -u[6], u[8] = -u[8],
<a name="line_71"></a> u[10] = -u[10], u[12] = -u[12], u[14] = -u[14], u[16] = -u[16]
<a name="line_72"></a>}:
<a name="line_73"></a>
<a name="line_74"></a>act_AT_rule[A1] := {
<a name="line_75"></a> r[1] = -r[1],
<a name="line_76"></a> t[1] = -1/t[1], t[3] = -1/t[3], s[1] = 1/s[1], s[3] = 1/s[3], s[ 9] = -s[ 9], s[11] = -s[11],
<a name="line_77"></a> s[13] = -s[15], s[14] = -s[16], s[15] = -s[13], s[16] = -s[14],
<a name="line_78"></a> u[1] = u[3], u[3] = u[1], u[5] = u[7], u[7] = u[5], u[9] = u[11], u[11] = u[9], u[13] = u[15], u[15] = u[13]
<a name="line_79"></a>}:
<a name="line_80"></a>
<a name="line_81"></a>act_AT_rule[A2] := {
<a name="line_82"></a> r[2] = -r[2],
<a name="line_83"></a> t[2] = -1/t[2], t[4] = -1/t[4], s[2] = 1/s[2], s[4] = 1/s[4], s[10] = -s[10], s[12] = -s[12],
<a name="line_84"></a> s[13] = -s[14], s[14] = -s[13], s[15] = -s[16], s[16] = -s[15],
<a name="line_85"></a> u[2] = u[4], u[4] = u[2], u[6] = u[8], u[8] = u[6], u[10] = u[12], u[12] = u[10], u[14] = u[16], u[16] = u[14]
<a name="line_86"></a>}:
<a name="line_87"></a>
<a name="line_88"></a>act_AT[1] := (a) -> a:
<a name="line_89"></a>for T in [L,M,N,A1,A2] do 
<a name="line_90"></a> act_AT[T] := subs(rule=act_AT_rule[T],eval((a) -> subs(rule,a))); 
<a name="line_91"></a>od:
<a name="line_92"></a>
<a name="line_93"></a><span style="color:red">#@ make_AT_rule 
</span><a name="line_94"></a>make_AT_rule := proc(T,U,TU)
<a name="line_95"></a> global act_AT_rule,act_AT;
<a name="line_96"></a> act_AT_rule[TU] := {seq(v = act_AT[T](act_AT[U](v)),v in xyrstu_vars)};
<a name="line_97"></a> act_AT[TU] := subs(rule=act_AT_rule[TU],eval((a) -> subs(rule,a))); 
<a name="line_98"></a> NULL;
<a name="line_99"></a>end:
<a name="line_100"></a>
<a name="line_101"></a>make_AT_rule(L,L,LL):
<a name="line_102"></a>make_AT_rule(L,LL,LLL):
<a name="line_103"></a>make_AT_rule(L,M,LM):
<a name="line_104"></a>make_AT_rule(L,LM,LLM):
<a name="line_105"></a>make_AT_rule(L,LLM,LLLM):
<a name="line_106"></a>make_AT_rule(L,N,LN):
<a name="line_107"></a>make_AT_rule(L,LN,LLN):
<a name="line_108"></a>make_AT_rule(L,LLN,LLLN):
<a name="line_109"></a>make_AT_rule(M,N,MN):
<a name="line_110"></a>make_AT_rule(L,MN,LMN):
<a name="line_111"></a>make_AT_rule(L,LMN,LLMN):
<a name="line_112"></a>make_AT_rule(L,LLMN,LLLMN):
<a name="line_113"></a>make_AT_rule(A1,A2,A12):
<a name="line_114"></a>make_AT_rule(L,A1,LA1):
<a name="line_115"></a>make_AT_rule(LL,A1,LLA1):
<a name="line_116"></a>make_AT_rule(LLL,A1,LLLA1):
<a name="line_117"></a>make_AT_rule(M,A1,MA1):
<a name="line_118"></a>make_AT_rule(LM,A1,LMA1):
<a name="line_119"></a>make_AT_rule(LLM,A1,LLMA1):
<a name="line_120"></a>make_AT_rule(LLLM,A1,LLLMA1):
<a name="line_121"></a>make_AT_rule(N,A1,NA1):
<a name="line_122"></a>make_AT_rule(LN,A1,LNA1):
<a name="line_123"></a>make_AT_rule(LLN,A1,LLNA1):
<a name="line_124"></a>make_AT_rule(LLLN,A1,LLLNA1):
<a name="line_125"></a>make_AT_rule(MN,A1,MNA1):
<a name="line_126"></a>make_AT_rule(LMN,A1,LMNA1):
<a name="line_127"></a>make_AT_rule(LLMN,A1,LLMNA1):
<a name="line_128"></a>make_AT_rule(LLLMN,A1,LLLMNA1):
<a name="line_129"></a>make_AT_rule(L,A2,LA2):
<a name="line_130"></a>make_AT_rule(LL,A2,LLA2):
<a name="line_131"></a>make_AT_rule(LLL,A2,LLLA2):
<a name="line_132"></a>make_AT_rule(M,A2,MA2):
<a name="line_133"></a>make_AT_rule(LM,A2,LMA2):
<a name="line_134"></a>make_AT_rule(LLM,A2,LLMA2):
<a name="line_135"></a>make_AT_rule(LLLM,A2,LLLMA2):
<a name="line_136"></a>make_AT_rule(N,A2,NA2):
<a name="line_137"></a>make_AT_rule(LN,A2,LNA2):
<a name="line_138"></a>make_AT_rule(LLN,A2,LLNA2):
<a name="line_139"></a>make_AT_rule(LLLN,A2,LLLNA2):
<a name="line_140"></a>make_AT_rule(MN,A2,MNA2):
<a name="line_141"></a>make_AT_rule(LMN,A2,LMNA2):
<a name="line_142"></a>make_AT_rule(LLMN,A2,LLMNA2):
<a name="line_143"></a>make_AT_rule(LLLMN,A2,LLLMNA2):
<a name="line_144"></a>make_AT_rule(L,A12,LA12):
<a name="line_145"></a>make_AT_rule(LL,A12,LLA12):
<a name="line_146"></a>make_AT_rule(LLL,A12,LLLA12):
<a name="line_147"></a>make_AT_rule(M,A12,MA12):
<a name="line_148"></a>make_AT_rule(LM,A12,LMA12):
<a name="line_149"></a>make_AT_rule(LLM,A12,LLMA12):
<a name="line_150"></a>make_AT_rule(LLLM,A12,LLLMA12):
<a name="line_151"></a>make_AT_rule(N,A12,NA12):
<a name="line_152"></a>make_AT_rule(LN,A12,LNA12):
<a name="line_153"></a>make_AT_rule(LLN,A12,LLNA12):
<a name="line_154"></a>make_AT_rule(LLLN,A12,LLLNA12):
<a name="line_155"></a>make_AT_rule(MN,A12,MNA12):
<a name="line_156"></a>make_AT_rule(LMN,A12,LMNA12):
<a name="line_157"></a>make_AT_rule(LLMN,A12,LLMNA12):
<a name="line_158"></a>make_AT_rule(LLLMN,A12,LLLMNA12):
<a name="line_159"></a>
<a name="line_160"></a><span style="color:red">#@ average_AT 
</span><a name="line_161"></a>average_AT := (a,H) -> add(act_AT[T](a)/nops(H),T in H);
<a name="line_162"></a>
<a name="line_163"></a><span style="color:red">#@ G64_mult 
</span><a name="line_164"></a>G64_mult := proc() procname(args) end:
<a name="line_165"></a>
<a name="line_166"></a><span style="color:red">#@ G64_inv  
</span><a name="line_167"></a>G64_inv  := proc() procname(args) end:
<a name="line_168"></a>
<a name="line_169"></a><span style="color:red">#@ G64_lookup
</span><a name="line_170"></a>for T in G64 do
<a name="line_171"></a> G64_lookup[map(act_AT[T],[t[1],t[2],t[3],t[4]])] := T;
<a name="line_172"></a>od:
<a name="line_173"></a>for T1 in G64 do
<a name="line_174"></a> for T2 in G64 do
<a name="line_175"></a>  T3 := G64_lookup[[seq(act_AT[T1](act_AT[T2](t[i])),i=1..4)]];
<a name="line_176"></a>  G64_mult(T1,T2) := T3;
<a name="line_177"></a>  if T3 = 1 then
<a name="line_178"></a>   G64_inv(T1) := T2;
<a name="line_179"></a>  fi;
<a name="line_180"></a> od:
<a name="line_181"></a>od:
<a name="line_182"></a>
<a name="line_183"></a>
<a name="line_184"></a><span style="color:red">#@ G64_conj 
</span><a name="line_185"></a>G64_conj := (a,b) -> G64_mult(G64_mult(a,b),G64_inv(a)):
<a name="line_186"></a>
<a name="line_187"></a><span style="color:red">#@ G64_classes 
</span><a name="line_188"></a>G64_classes := [op(map(T -> map(U -> G64_conj(U,T),{op(G64)}),{op(G64)}))];
<a name="line_189"></a>
<a name="line_190"></a>stab_A  := (u) -> select(T -> act_A[T](u) = u,G16);   <span style="color:red">#@ stab_A
</span><a name="line_191"></a>stab_AT := (u) -> select(T -> act_AT[T](u) = u,G64);  <span style="color:red">#@ stab_AT
</span><a name="line_192"></a>orb_AT  := (v) -> {op(map(T -> act_AT[T](v),G64))};   <span style="color:red">#@ orb_AT
</span><a name="line_193"></a>uorb_AT := (v) -> map(strip_sign,orb_AT(v));          <span style="color:red">#@ uorb_AT
</span><a name="line_194"></a>
<a name="line_195"></a><span style="color:red">#@ G64_subgroup_generated_by
</span><a name="line_196"></a>G64_subgroup_generated_by := proc(L::set)
<a name="line_197"></a> local H0,H1,T,U;
<a name="line_198"></a> H0 := {1};
<a name="line_199"></a> H1 := L;
<a name="line_200"></a>
<a name="line_201"></a> while H1 <> H0 do
<a name="line_202"></a>  H0 := H1;
<a name="line_203"></a>  H1 := {op(H1),seq(seq(G64_mult(T,U),T in H0),U in H0)};
<a name="line_204"></a> od;
<a name="line_205"></a>
<a name="line_206"></a> return sort([op(H1)]);
<a name="line_207"></a>end:
<a name="line_208"></a>
<a name="line_209"></a># This code is not run by default, because it is slow, and not too useful.
<a name="line_210"></a># There are 569 subgroups altogether.
<a name="line_211"></a>
<a name="line_212"></a><span style="color:red">#@ find_G64_subgroups 
</span><a name="line_213"></a><span style="color:red">#@ G64_cyclic_subgroups 
</span><a name="line_214"></a><span style="color:red">#@ G64_subgroups
</span><a name="line_215"></a><span style="color:red">#@ G64_subgroup_join;
</span><a name="line_216"></a>
<a name="line_217"></a>find_G64_subgroups := proc()
<a name="line_218"></a> global G64_cyclic_subgroups,G64_subgroups,G64_subgroup_join;
<a name="line_219"></a> local T,U,C,n,SG;
<a name="line_220"></a>
<a name="line_221"></a> G64_cyclic_subgroups := {}:
<a name="line_222"></a> for T in G64 do
<a name="line_223"></a>  U := T;
<a name="line_224"></a>  C := {1};
<a name="line_225"></a>  while U <> 1 do 
<a name="line_226"></a>   C := {op(C),U};
<a name="line_227"></a>   U := G64_mult(T,U);
<a name="line_228"></a>  od:
<a name="line_229"></a>  G64_cyclic_subgroups := {op(G64_cyclic_subgroups),sort(C)};
<a name="line_230"></a> od:
<a name="line_231"></a>
<a name="line_232"></a> G64_subgroup_join := proc(H1,H2)
<a name="line_233"></a>  local U,H,HH,T1,T2;
<a name="line_234"></a>  U := H1 union H2;
<a name="line_235"></a>  H := U;
<a name="line_236"></a>  while true do
<a name="line_237"></a>   HH := {seq(seq(G64_mult(T1,T2),T1 in H),T2 in U)};
<a name="line_238"></a>   if HH = H then break; fi;
<a name="line_239"></a>   H := HH;
<a name="line_240"></a>  od:
<a name="line_241"></a>
<a name="line_242"></a>  return sort(H);
<a name="line_243"></a> end:
<a name="line_244"></a>
<a name="line_245"></a> G64_subgroups := G64_cyclic_subgroups:
<a name="line_246"></a> n := 6;
<a name="line_247"></a> while n>0 do
<a name="line_248"></a>  SG := {seq(seq(G64_subgroup_join(H1,H2),H1 in G64_subgroups),H2 in G64_cyclic_subgroups)};
<a name="line_249"></a>  if nops(SG) = nops(G64_subgroups) then break; fi;
<a name="line_250"></a>  G64_subgroups := SG;
<a name="line_251"></a>  print(nops(SG));
<a name="line_252"></a>  n := n-1;
<a name="line_253"></a> od:
<a name="line_254"></a>end:
  </pre>
 </body>
</html>
    
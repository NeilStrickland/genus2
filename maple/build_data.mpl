infolevel[genus2] := 7:

set_toy_version := proc(t)
 global toy_version,save_dir;
 if t = true then
  toy_version := true;
  save_dir := cat(genus2_dir,"/data_toy");
 else
  toy_version := false;
  save_dir := cat(genus2_dir,"/data");
 fi;
end:

if not(assigned(toy_version)) then
 set_toy_version(false);
fi;

build_data := table();
save_data := table();
load_data := table();

ui := proc(m,s)
 global start_time;
 local t;
 
 if not(type(start_time,numeric)) then start_time := 0; fi;
 t := time() - start_time;
 userinfo(m,genus2,sprintf("%s [%A]",s,t));
end:

make_save_dir := proc()
 global save_dir;
 local subdirs,subdir,dir;
 
 subdirs :=
  ["",
   "/domain",
   "/quadrature",
   "/projective",
   "/hyperbolic",
   "/embedded",
   "/embedded/roothalf"];

 for subdir in subdirs do
  dir := cat(save_dir,"/",subdir);
  if not(isdir(dir)) then mkdir(dir); fi;
 od;

 NULL;
end:

######################################################################

build_data["HP_table"] := proc()
 global HP_table;
 local a0,aa,i,P,d;

 ui(5,"Building HP_table");

 HP_table := `new/HP_table`():
 HP_table["H_to_P_num_samples"] := 20;
 HP_table["H_to_P_poly_deg"] := 15;
 HP_table["H_to_P_num_steps"] := 20;

 if toy_version then
  aa := [0.7,0.8,0.9,0.6,0.5,0.4,0.35,0.3,0.25,0.2,0.15,0.1];
 else
  aa := [seq(a0,a0=0.70..0.94, 0.02),
         seq(a0,a0=0.68..0.06,-0.02)];
 fi;
 
 for a0 in aa do
  HP_table["add_a_H",a0];
 od:

 if not(toy_version) then
  for a0 in aa do
   ui(6,sprintf("Refining map with a_H=%A",a0));
   P := eval(HP_table["H_to_P_maps"][a0]);
   P["make_samples",200];
   for d from 15 to 50 by 5 do
    ui(6,sprintf("d=%d",d));
    P["set_poly_deg",d];
    P["find_p1",20];
   od:
  od:

  HP_table["H_to_P_poly_deg"]  := 50;
  HP_table["H_to_P_num_samples"] := 200;
 fi;
 
 HP_table["set_spline"];

 HP_table["P_to_H_poly_deg"]   := `if`(toy_version,20,100);
 HP_table["P_to_H_num_charts"] := `if`(toy_version,10,16);
 HP_table["P_to_H_tolerance"]  := `if`(toy_version,10.^(-20),10.^(-24));
 HP_table["P_to_H_gap"]        := 0.02;

 if toy_version then
  aa := [seq(a,a=0.1..0.9,0.1)];
 else
  aa := [seq(a,a=0.06..0.94,0.02)];
 fi;
 
 for a0 in aa do
  HP_table["add_a_P",a0];
 od;

 NULL;
end:

##################################################

save_data["HP_table"] := proc()
 if not(assigned(HP_table)) then
  error "HP_table is not set";
 fi;
 make_save_dir();
 save(HP_table,cat(save_dir,"/hyperbolic/HP_table.m"));
end:

load_data["HP_table"] := proc()
 read(cat(save_dir,"/hyperbolic/HP_table.m"));
end:

######################################################################

build_data["triangle_quadrature_rule"] := proc() 
 local i,n;
 global dunavant_19,wandzurat_xiao_30,tri_quad_rule;

 ui(5,"Building triangle quadrature rule");

 if toy_version then
  dunavant_19 := 
   `new/triangle_quadrature_rule`(19,
   [[1/3, 1/3, 1/3], [3151/151636, 12629/25794, 12629/25794],
    [8689/95561, 43436/95561, 43436/95561],
    [8267/41929, 16831/41929, 16831/41929],
    [5570/11393, 5823/22786, 5823/22786],
    [12479/19322, 6843/38644, 6843/38644],
    [30657/39310, 8653/78620, 8653/78620], 
    [38509/43320, 8362/150589, 8362/150589], 
    [31895/32721, 2623/207814, 2623/207814], 
    [2479/686434, 13331/33685, 15921/26507], 
    [13675/101698, 21427/69584, 24205/43409], 
    [1147/79399, 21563/81503, 14171/19655], 
    [4995/106427, 13589/37901, 40215/67642], 
    [1712/598367, 13505/85579, 29479/35122], 
    [4042/53857, 11153/49821, 18623/26563], 
    [9045/261061, 36764/258135, 18130/22031], 
    [2271/223499, 24189/369328, 24069/26039]],
   [1251/38017, 4175/404134, 2879/128600, 2858/94429, 8053/264111, 9113/377206, 16861/1050477, 3191/394702, 1189/571810, 1878/483413, 9199/359699, 5368/604443, 3015/186982, 92/36919, 11344/621833, 9332/909679, 2254/593169]
 ):
  tri_quad_rule := eval(dunavant_19);
 else
  wandzurat_xiao_30 := 
   `new/triangle_quadrature_rule`(30,[
   [1/3, 1/3, 1/3],
   [372677191/50841919691, 596274733/1201355542, 596274733/1201355542],
   [780526075/9404418573, 1752647608/3822550367, 1752647608/3822550367],
   [1163960439/7709319565, 3272679563/7709319565, 3272679563/7709319565],
   [2658305039/11268499393, 1468947111/3844937512, 1468947111/3844937512],
   [2134000858/4871877695, 2754796095/9803968877, 2754796095/9803968877],
   [3941830562/7228710353, 1547236081/6805555535, 1547236081/6805555535],
   [1846001903/2836155456, 990153553/5672310912, 990153553/5672310912],
   [1706222357/2264446613, 2487154685/20178374343, 2487154685/20178374343],
   [2828452837/3367881170, 958456854/11968109917, 958456854/11968109917],
   [1371199525/1516057173, 704187651/14739832576, 704187651/14739832576],
   [511064554/534273965, 756707271/34838367421, 756707271/34838367421],
   [1507386701/1521889325, 254666246/53448788471, 254666246/53448788471],
   [45225247/48872546850, 2406111506/5793736829, 2453863320/4203408851],
   [100519419/72528713276, 2083865289/34055701280, 5847411937/6237743979],
   [121712479/33052348508, 2192022621/13292341472, 2741583347/3297515056],
   [196505431/50344397347, 88158901/3521417290, 12851438961/13234420399],
   [522434785/161582025243, 2241831004/7324702013, 10060544951/14565674886],
   [158575591/24519096335, 583707541/5451476976, 2051608690/2314385699],
   [1275135910/392654513761, 1986609967/8639029128, 2500823557/3261397946],
   [268047446/30898517603, 2024620229/6007122161, 1129717085/1726635073],
   [459327373/29449675806, 3296448767/58596683103, 1951624961/2102712424],
   [648205933/36058073319, 1992647038/4951274019, 1301140377/2245002508],
   [59486631/3473824964, 2029620945/8329906742, 2592437728/3506985791],
   [151824080/6634680359, 1110705689/6715693040, 2121598374/2613684589],
   [1056495685/32271631779, 2069456995/20840059722, 2222549224/2560657025],
   [978762795/28939488419, 1030557305/3340776951, 2002966157/3045406969],
   [527289686/14833335345, 1997621802/4336355945, 2768449629/5495310016],
   [7331876125/145071360219, 876848805/4007255467, 6489459782/8881824387],
   [3121748873/54753389149, 2026840622/5344909203, 2069900779/3671496760],
   [694267269/10822087259, 1090970286/7631253727, 415018623/523427614],
   [1294256525/16077491471, 1090541652/3843572143, 2589566453/4073133920],
   [583860714/5594300237, 2351456686/11952258167, 34867914615/49890026579],
   [621949366/5463129191, 747015761/2099012514, 1627561795/3069331061],
   [741462754/5100749615, 1301398905/5008873412, 2278921285/3831292846],
   [3641492987/19171236261, 466243771/1448307541, 1554454601/3184501850]],
   [278442372/17871828193, 264270891/83176409389, 412206833/39319856696,
    314308889/23794227701, 280326788/18719643245, 740274581/49391466552,
    102346317/7672790675, 226620307/20811529604, 724186055/88429245047,
    286809546/51442082087, 187526007/58763173405, 96881438/74712968707,
    104236296/349478000161, 92736449/92838043056, 52279551/112951183072,
    68241541/55280867693, 145802611/255471419869, 79335934/70399047637,
    154905199/88625280690, 90504108/76515614099, 121426507/60992621215,
    158029545/83155378354, 67074653/14910893389, 273865655/78725996197,
    216468143/52766232895, 392715068/97647526623, 452632727/75024096382,
    395252498/100157988323, 141917247/21360068584, 310902590/37665503971,
    93601122/14408914097, 631101989/68206756843, 174950865/19089184754,
    283895221/24538192374, 2490895660/211790748511, 1014668284/73395308675]
 ):
  tri_quad_rule := eval(wandzurat_xiao_30):
 fi;
 

 ui(6,"Improving triangle quadrature rule");

 n := `if`(toy_version,4,10);
 
 for i from 1 to n do
  ui(7,sprintf("Improving triangle quadrature rule: step %d/%d",i,n));
  tri_quad_rule["improve"];
 od:
end:

##################################################

save_data["triangle_quadrature_rule"] := proc()
 if toy_version then
  if not(assigned(dunavant_19)) then
   error "dunavant_19 is not set";
  fi;
   make_save_dir();
  save(dunavant_19,cat(save_dir,"/quadrature/dunavant_19.m"));
 else
  if not(assigned(wandzurat_xiao_30)) then
   error "wandzurat_xiao_30 is not set";
  fi;
   make_save_dir();
  save(wandzurat_xiao_30,cat(save_dir,"/quadrature/wandzurat_xiao_30.m"));
 fi;
end:

load_data["triangle_quadrature_rule"] := proc()
 if toy_version then
  read(cat(save_dir,"/quadrature/dunavant_19.m"));
 else
  read(cat(save_dir,"/quadrature/wandzurat_xiao_30.m"));
 fi;
end:

######################################################################

build_data["grid"] := proc()
 global split_rational_grid_wx_30,rational_grid_dunavant_19,grid;
 local i,j,c,EE,E,FF,F;

 ui(5,"Creating grid");

 if toy_version then
  rational_grid_dunavant_19 := `new/E_grid`():
  rational_grid_dunavant_19["triangle_quadrature_rule"] :=
   eval(dunavant_19);
  ui(6,"Initial setup");
  rational_grid_dunavant_19["setup",evalf(rational_grid_points)];

  ui(6,"Creating samples");
  rational_grid_dunavant_19["create_samples"];

  ui(6,"Calculating integrals");
  rational_grid_dunavant_19["set_max_deg",7];
 else
  split_rational_grid_wx_30 := `new/E_grid`():
  split_rational_grid_wx_30["triangle_quadrature_rule"] :=
   eval(wandzurat_xiao_30);

  ui(6,"Initial setup");
  split_rational_grid_wx_30["setup",evalf(rational_grid_points)];

  ui(6,"Subdividing");
  split_rational_grid_wx_30["subdivide"];

  ui(6,"Creating samples");
  split_rational_grid_wx_30["create_samples"];

  ui(6,"Calculating integrals");
  split_rational_grid_wx_30["set_max_deg",23];
 fi;
 
 NULL;
end:

##################################################

save_data["grid"] := proc()
 if toy_version then 
  if not(assigned(rational_grid_dunavant_19)) then
   error "rational_grid_dunavant_19 is not set";
  fi;
   make_save_dir();
  save(rational_grid_dunavant_19,
       cat(save_dir,"/embedded/roothalf/rational_grid_dunavant_19.m"));
 else
  if not(assigned(split_rational_grid_wx_30)) then
   error "split_rational_grid_wx_30 is not set";
  fi;
   make_save_dir();
  save(split_rational_grid_wx_30,
       cat(save_dir,"/embedded/roothalf/split_rational_grid_wx_30.m"));
 fi;
end:

load_data["grid"] := proc()
 if toy_version then
  read(cat(save_dir,"/embedded/roothalf/rational_grid_dunavant_19.m"));
 else
  read(cat(save_dir,"/embedded/roothalf/split_rational_grid_wx_30.m"));
 fi;
end:

######################################################################

build_data["E_quadrature_rule"] := proc()
 local P,Q,TT,PP;
 global quadrature_frobenius_25a,quadrature_frobenius_256a;

 ui(5,"Creating quadrature rule for EX^*");

 Q := `new/E_quadrature_rule`():

 ui(6,"Adding points");

 if toy_version then
  PP := [
    [0, 0, 1, 0], 
    [0, 1, 0, 0], 
    [33461/47321, 33461/47321, 0, 0],
    [0, 0, 38804/47525, -29681/51409], 
    [11608/37891, 34/5004131, 23011/26164, -23191/63676],
    [-8093/61002, 453/1347455, -31471/38190, 16085/29206],
    [43537/51554, 0, -35081/80224, -19457/62925],
    [0, 7351/30813, 30967/36647, 20441/42711], 
    [7687/17700, -8639/22381, 85585/109973, 11944/50141], 
    [-26014/45893, -26014/45893, 17794/29765, 0], 
    [41089/44864, 11738/29235, 0, 0], 
    [55299/169997, -24344/42595, 15046/22279, -45463/136178], 
    [9800/11707, -71234/130217, 0, 0], 
    [-18143/35771, 0, 27091/38499, 44363/89158], 
    [-17405/82067, -22296/54959, 64687/85332, -36185/77897], 
    [-26688/188789, 128852/137569, 48447/182600, -3378/18785], 
    [21589/32500, 21589/32500, -21844/63733, 0], 
    [10433/34642, -23993/28198, -30464/81355, 35581/167562], 
    [-3593/19589, -18783/26590, 27289/47592, -40265/108161], 
    [-30110/124239, -30110/124239, -24862/26465, 0], 
    [39464/40765, 22915/91433, 0, 0], 
    [95687/216048, -25784/34071, -9499/21149, 10495/61203], 
    [-27711/91097, 0, -31868/34245, 8386/41179], 
    [-22178/52465, 22178/52465, 19830/24737, 0], 
    [-23657/34665, 44459/84130, -91766/185619, -26023/252859]]:

 else 
  TT := [[1, 0], [0, 1], [0, 0], [1, 1], [96139/96231, 8845/71537], [53065/53502, 11279/343135], [1, 23716/24555], [39302/157049, 24228/31985], [1077/343400, 16489/16726], [1, 27567/31685], [48191/49644, 1], [0, 17773/25394], [1, 18804/24805], [0, 32745/37952], [7153/11420, 11899/51994], [0, 20933/50999], [3319/19896, 23732/29441], [0, 22716/23897], [11247/13987, 12623/12926], [41164/144285, 15479/27831], [24211/25228, 32186/32805], [47411/57091, 18862/24505], [51284/66455, 0], [2281/55524, 27579/32723], [21763/22356, 0], [36637/91569, 0], [36919/42217, 19820/164423], [54278/143201, 150481/159178], [13459/158016, 14506/14641], [3891/191074, 0], [59053/89796, 38619/41380], [96412/97311, 77837/107761], [78811/79108, 165831/178867], [15253/19232, 20501/40392], [8471/29659, 9820/133301], [21079/49352, 23748/23749], [10834/35621, 1], [6279/6311, 14933/59669], [174282/187109, 34835/36616], [36373/36376, 0], [53588/57787, 0], [27031/253745, 2272/107225], [1489/2303484, 71016/130345], [16203/89653, 15226/51395], [22349/25683, 32935/69703], [115966/115967, 30746/31051], [8003/17012, 33874/37117], [48568/80947, 2353/50660], [24338/24619, 0], [38853/51305, 1], [53731/54934, 11297/25565], [17605/27226, 34213/34216], [5069/140901, 1], [1, 79677/403313], [20495/22088, 137776/137939], [7971/55615, 0], [3604/184425, 15616/44873], [0, 7777/91393], [42735/48892, 1], [736/66379, 6075/6659], [23197/171019, 1], [3996/7345, 1], [10723/10724, 20511/35983], [1, 68831/1044534], [1, 2780/1650163], [689747/689748, 15049/47511], [28226/29875, 1947/6751], [43813/154867, 14861/32818], [43889/45858, 2258/79151], [130693/242383, 9279/120146], [43913/201177, 114959/115446], [22709/28663, 27603/30029], [22814/24275, 10776/87341], [27693/28187, 2070/35729], [28706/51017, 20927/55081], [4336/16315, 25403/30168], [39501/42401, 4271/20021], [7787/15201, 0], [6059/25719, 24631/116678], [10643/151635, 1/1403545477], [5813/65068, 6313/12868], [18856/42583, 3943/537542], [38889/44039, 3313/59754], [24613/27017, 54471/75110], [120790/144327, 0], [693/3359441, 4674/120679], [15304/21553, 32328/32731], [63027/91870, 617386/1196779], [9770/73749, 5351/7528], [17277/23956, 18488/67747], [94681/95056, 0], [22465/26874, 5021/58755], [21371/21954, 15631/66988], [18053/25880, 16184/133751], [50576/59001, 4941/191665], [23918/54069, 14949/60713], [17497/46031, 12635/17903], [83164/95603, 40014/59827], [690/65957, 11862/15023], [22549/33677, 12546/18299], [11615/32241, 11851/110869], [21749/24449, 11329/11585], [22585/50298, 22623/54038], [15612/25673, 0], [12457/72529, 1257/30409], [89/28917256, 2690/14161], [4602/65111, 3801/21256], [4780/279183, 20117/32161], [17759/21262, 5949/20633], [154041/157198, 18829/30512], [1993/185896, 17851/129412], [17727/53762, 28658/29009], [8138/11905, 20359/26464], [24271/26915, 27609/30626], [21111/114128, 12921/139823], [12152/21533, 12300/21947], [33597/36062, 20180/32371], [4165/5948, 40675/46073], [15010/59917, 34745/36139], [12257/64602, 19811/39739], [3747/30934, 28015/29811], [12527/31726, 35971/41048], [46666/46667, 3375/180914], [5809/28401, 21439/33853], [46368/48709, 10139/11909], [6107/159701, 93226/96713], [69467/111314, 19712/23621], [61633/115706, 31840/32119], [11417/83031, 5833/13969], [8875/79967, 2233/20182], [43249/47744, 22583/41572], [31978/32615, 2205/19357], [3994/54837, 19196/24821], [70342/93013, 7018/265675], [1, 14709/22142], [5423/259074, 7726/36247], [118369/141275, 29929/51864], [49083/62347, 20087/141328], [49147/49418, 12355/31974], [16711/42532, 73593/94750], [10869/24166, 56250/170417], [10483/10927, 31630/34639], [16171/99444, 52931/54206], [5870/118917, 58705/104728], [30026/30191, 45027/55214], [28479/40846, 81445/220333], [6575/8846, 13679/31063], [9987/28429, 10211/27721], [25908/36151, 9879/52802], [17171/17529, 82769/86877], [31829/38064, 19069/48491], [16279/32031, 98901/118366], [154857/449128, 18675/82601], [14091/14764, 181/148839], [94779/303757, 25961/28625], [49225/51212, 7143/42923], [21119/26062, 45958/53077], [25631/34424, 21321/22253], [69226/183531, 3375/67562], [4171/32061, 13461/15397], [39738/40619, 3473/128487], [180566/364007, 36664/289589], [30097/64725, 13886/25103], [15140/39499, 29722/49485], [12771/26596, 10311/334253], [3686/196799, 8257/147650], [23354/38183, 6670/43029], [29368/29899, 19663/62588], [20980/26509, 26148/40267], [29732/31509, 55574/71571], [29611/144091, 54070/59439], [13424/472975, 17096/23879], [14208/19321, 31533/53408], [19842/37241, 16685/35359], [47695/49643, 20386/29527], [18589/32404, 44195/58928], [7021/11664, 29767/33152], [1328/723151, 13115/45656], [14908/16049, 4865/290676], [22487/34264, 4657/207167], [20631/54473, 5363/10630], [4071/63929, 16738/18473], [30681/34555, 0], [27887/28191, 1611/164918], [21779/24470, 33264/102611], [29414/34443, 1963722/1975073], [14653/268002, 13189/48645], [53117/83860, 14136/31681], [5812/6059, 3124/8479], [30225/47704, 20731/33879], [37145/79126, 49605/65242], [22529/104350, 2383/254634], [13093/15452, 10867/11475], [7244/339669, 16067/33830], [11526/12737, 5711/34677], [11124/14711, 15938/19373], [6845/148581, 2107/138125], [50493/51799, 13877/17384], [7430/57191, 45154/77787], [44513/44790, 24527/300184], [3231/69001, 5673/55355], [24758/28031, 6881/28564], [54605/55164, 58939/67070], [35639/35964, 38552/38701], [11752/95401, 9965/42141], [9657/17185, 2507/189332], [20636/21529, 35011/64053], [20965/21036, 1415/149112], [32975/73884, 15409/193617], [2366/581939, 1423/117118], [12443/12944, 8297/109161], [9752/133505, 33337/51030], [24494/38957, 11799/132257], [20133/38192, 49079/51573], [42736/43903, 3029/355229], [17541/49804, 2366/124647], [8777/150493, 73267/181878], [44124/141059, 766/469833], [17354/39553, 11306/11605], [92134/100783, 13681/160658], [23598/26549, 2416/272797], [10513/37527, 59333/205284], [6241/9873, 26579/84317], [26595/67139, 17289/105884], [15644/53311, 32131/47801], [75461/93424, 7696/161669], [16707/21848, 13843/162253], [17657/76069, 0], [3106/13759, 7781/21280], [36143/36164, 3621/697271], [82536/82681, 10285/291058], [59352/59371, 29001/63184], [46623/55268, 28284/158275], [5657/55461, 10448/31721], [15887/22620, 52955/939294], [38573/49587, 19711/57580], [13012/14009, 11119/249176], [74616/283715, 8093/264746], [86676/86755, 2/288068281], [23699/34200, 0], [34099/34406, 10387/20169], [16921/32597, 21833/113791], [24730/48383, 74447/114974], [14356/84785, 11293/69629], [23764/29235, 2532/237365], [28873/31698, 45928/115551], [22239/36658, 42135/43213], [2359/3095, 22279/30132], [32372/45325, 2163/289600], [112817/419532, 19641/142748], [7765/102746, 11147/201680], [6549/12113, 21517/77880], [27032/28827, 8020/17209], [273544/311411, 24024/29089], [151336/152721, 31508/186251], [43022/54573, 43093/191367]]:

  PP := evalf(map(t_lift,TT));
 fi;

 for P in PP do Q["add_new_point",P]: od:

 ui(6,"Adding test monomials");
 if toy_version then
  Q["set_max_deg",7,rational_grid_dunavant_19];
 else
  Q["set_max_deg",23,split_rational_grid_wx_30];
 fi;
 
 ui(6,"Solving for weights");
 Q["solve_weights"]: 

 ui(6,"Adjusting to increase evaluation determinant");
 Q["increase_eval_det",10.^(-4)];

 ui(6,"Adjusting to reduce errors");
 Q["reduce_errors"];

 if toy_version then
  quadrature_frobenius_25a := eval(Q):
 else
  quadrature_frobenius_256a := eval(Q):
 fi;
 
 NULL;
end:

##################################################

save_data["E_quadrature_rule"] := proc()
 if toy_version then
  if not(assigned(quadrature_frobenius_25a)) then
   error("quadrature_frobenius_25a is not set");
  fi;
   make_save_dir();
  save(quadrature_frobenius_25a,
       cat(save_dir,"/embedded/roothalf/quadrature_frobenius_25a.m"));
 else
  if not(assigned(quadrature_frobenius_256a)) then
   error("quadrature_frobenius_256a is not set");
  fi;
   make_save_dir();
  save(quadrature_frobenius_256a,
       cat(save_dir,"/embedded/roothalf/quadrature_frobenius_256a.m"));
 fi;
end:

load_data["E_quadrature_rule"] := proc()
 if toy_version then
  read(cat(save_dir,"/embedded/roothalf/quadrature_frobenius_25a.m"));
 else
  read(cat(save_dir,"/embedded/roothalf/quadrature_frobenius_256a.m"));
 fi;
end:

######################################################################

build_data["square_diffeo"] := proc()
 local n;

 n := `if`(toy_version,24,48);
 
 ui(5,"Tabulating values of square_diffeo_E0_inverse");

 find_square_diffeo_E0_inverse(n);
end:

##################################################

save_data["square_diffeo"] := proc()
 make_save_dir();
 save(square_diffeo_E0_inverse,
      square_diffeo_E0_inverse_order,
      square_diffeo_E0_inverse_table,
      square_diffeo_E0_inverse_chebyshev_table,
      cat(save_dir,"/embedded/roothalf/square_diffeo_E0_inverse.m"));
end:

load_data["square_diffeo"] := proc()
 read(cat(save_dir,"/embedded/roothalf/square_diffeo_E0_inverse.m"));
end:

######################################################################

build_data["EH_atlas",0] := proc()
 build_data["EH_atlas",1]();
 build_data["EH_atlas",2]();
 build_data["EH_atlas",3]();
 build_data["EH_atlas",4]();
end:

build_data["EH_atlas",1] := proc()
 global EH_atlas;

 ui(5,"Creating EH_atlas");

 EH_atlas := `new/EH_atlas`():

 if toy_version then
  EH_atlas["quadrature_rule"] := eval(quadrature_frobenius_25a):
 else
  EH_atlas["quadrature_rule"] := eval(quadrature_frobenius_256a):
 fi;
end:

build_data["EH_atlas",2] := proc()
 local S,T,E,F,d,pd,cd,a,b,i,j,k,s,t,e;
 global EH_atlas;

 if toy_version then
  d  := 10;
  cd := 10;
  pd := 4;
 else
  d  := 16;
  cd := 16;
  pd := 8;
 fi;
 
 ui(5,"Finding rescaling function");
 EH_atlas["set_rescale_type","pade",pd]:

 F := (1.695917479262285948089420795009827989104715103904547112992992697715907727322193949580598107131673374*z[1]-1.135732931122319117652454235835004190074271325192503769821463666578322820075306501011279804475698640*z[2]-0.4124938510428956046940763440012548845488516196726467020805285874207610470342976983470037368293777416e-3*z[2]^6-0.6837837581401513434381423217701836997245354729594811396088411585572592733449460983938489753177816294e-1*z[1]^6-0.1747787769733956245891608192260677694419066982325323896026374499535106030369277473867709376610553433e-3*z[2]^7+0.3477525856053578360900181838385366646399825601687547410378810329955367104132553212107303975356287566e-4*z[2]^8+0.2465068054506156514772060928355864477034241005561634829147765785081557067589195231768375046498345479e-2*z[1]^7+0.1352669109902975306674377334422909902940614491254070857204509124905828135474069482682375203123406615e-3*z[1]^8+3.995818711161727834832938510259660508708643479793708108039477973992421149990697194015782514424927765*z[1]*z[2]+0.2642709584506758824044553964054284066888446439541258334411046500886078555252029842519027884629379541e-2*z[1]^6*z[2]-0.4244347052990631505094664990183418873640181738024220471523955779865220845664497521512227074083818841e-2*z[1]^5*z[2]^3-0.5532945058774688937510093972336085830475058093940467775993454669148358474932430824858811580562658564e-2*z[1]^4*z[2]^4-0.6302163986824205274078426741863624049509807344999317482454243269293845193626428438348430089714834305e-3*z[1]^7*z[2]+0.4207522776514039415939321952911145580989357673676842874966392243409276169598891810699680782590462359e-2*z[1]^6*z[2]^2+.2905232730140743783212063692921632132371970064649650161880620725864709996001001655730592254663277486*z[1]^3*z[2]^2-1.090439879958389826546452365898981162437420219788974322758250889698483278481777082286554334135316246*z[1]^4*z[2]-.3247590304398277083539474375007568738738018402176632224053769646373831597427237183414262744238987408*z[1]*z[2]^4+.5509078907277252577059891255183555520847055345623786336927123588358079649326468773977952798118541334*z[1]^2*z[2]^3-0.1983747023011236383639719705249977835198739978913966459475724996603951741100032315325462259290453896e-1*z[1]*z[2]^5+.1680822203114272828862336586472398799971946815439419042626093388916402169144537738184035511730736716*z[1]^2*z[2]^4+.1269854636801654766116376274759681745427620574878646138060889132168787435309601288977177336000248476*z[1]^5*z[2]+.1766561788681105865748727008012224854013513796637549003379718348558724438182249455620972890122020158*z[1]^4*z[2]^2-.3864419631594911430922886943365947093451728608449426567006962356337183461730930767751420085665884713*z[1]^3*z[2]^3-0.6001291646439990846814155387763167649093197307996093027585885413007423839001481765714751296200368987e-2*z[1]^3*z[2]^4-0.2097564747295033484114259629847767999424485917732820884060628264749203895282578635253335079982665228e-1*z[1]^2*z[2]^5+0.2979817265999016304935995517850155759334399675907093179707758658293243179604551961123107704236364011e-2*z[1]*z[2]^6-0.1002759880087857281390514201987432723500171845950930180893333216577830679670358262317987162558346027e-3*z[1]*z[2]^7-0.8419312542562271499920370948748487008478795829324987256317032895584910945339959869060169944148621712e-3*z[1]^2*z[2]^6+0.6909718431701554553423636745630005608763433755018537007100389806335704694470261364018676513913667194e-2*z[1]^3*z[2]^5+0.8468320278669691002958099092914529314538790552080417943834942606563606701510764884323872211393196791e-1*z[1]^4*z[2]^3-0.6218239197659203288888338732574041344334294000392744296973225054841360897191706145994831283865481150e-1*z[1]^5*z[2]^2-0.9922603687560201028925448646762481949195548364169138694999415620132839064535739335880225858363739206e-1*z[1]*z[2]^3+3.499776511723411378516100644998624341682549759499462472365975666332184693470885268274342265804423679*z[1]^3*z[2]+.1552799542530108156507513790020206123279019436486885074766613212503663061487412639051988592629632573*z[2]^4+0.4563188228086801706192639312142256225333183667895672282409862444533864314191267449048979587020854939e-1*z[2]^5-1.818037785033386281843216861016703577408691783936224262988943375266534316694344178238374001259965704*z[1]^2*z[2]^2-5.392424670902253401704896821030020814879335721655890496743900151573164388729511312169423255186280685*z[1]^2*z[2]-3.152033752058751512807126387707039292639195371174637842467878057177109193257718736632822439340638439*z[1]^2-1.045205840722520158311257674562633875389242115633475359309734956538992485279401148505931632705104939*z[2]^2-.1706650533458081176553285580072531809161885335516990856262687822359600308363309387977490724831586568*z[2]^3+.4880009204511725024076661333543757592505026258821940838513429125333048907206430481149884495004304703*z[1]^5-1.652511555549381925357644800543795487403908346066180832669068122282280157981007265875699395164375380*z[1]^4+3.054345236352968050696713732397146416804537619642599726906737301086694819443430735488649447238246522*z[1]^3+2.454950083143246791926477059852140574849282932448609262410560127340537881515823184628366163803956103*z[1]*z[2]^2-.3668400372285565391042772773353835361024893493537633862318979521025040051451439081028176443604035261)/(1-3.495550861247277030542076623431529217563213074613409173850008891565640036928864152979287786161996842*z[1]+2.177959904978007246120962941507918038051773604375993055753242968114794543543136928227345289012749185*z[2]+0.1496776948732307135547545841307580825642285755486113454229717362413925690257631905967609951836577181e-2*z[2]^6+0.3601595110716873877743140083608537757268300186277234202189933410052460721443011688711423568542287635e-1*z[1]^6+0.1160763623002581656954751307654231516671359198165228325858162945902095967521922784350949196986196334e-4*z[2]^7-0.2587648253764614140205510648192613199095932178089687331424486618072910557587972547238238158687383265e-4*z[2]^8-0.4932647462584423546224831148462354428223526454879314446298853724421474060684457324635884352554891241e-3*z[1]^7-0.6223078457219148380074738964421388934010397317082061182347481898763717670683577080774362374494081327e-4*z[1]^8-5.742675231948817477287106666039186570973213649983620825297362494763699143972894226039374378305180648*z[1]*z[2]-0.5105385096501717015206006098777435383124253139853490532920108590092907412733457059427329954185679030e-2*z[1]^6*z[2]+0.1244318776391738503079863573446755486004047288361877677868882389969375697203054306543133265854652929e-3*z[1]^5*z[2]^3+0.3709580749839496813119782670455343121861898304524774490731968556705091124478026750952475277260063118e-2*z[1]^4*z[2]^4+0.1992488486452081509257842425352205156869224170966976263526628789982359949474050931355441405579888034e-3*z[1]^7*z[2]-0.1372475102781695304503341419476179502236506880876127715593618752110488874063620852770785234217411505e-2*z[1]^6*z[2]^2+.3283860671207789519892947050155342371264643548813232675497966219464726073689615006473245819376797111*z[1]^3*z[2]^2+.5680366960718920685875698689167886507817238583418006394408979727009702114729713060281446811664322963*z[1]^4*z[2]+.2457989483072936108368096014492722129322201708560998052646193227215126774551540585148381177918271891*z[1]*z[2]^4-.6713095210232718108611159104126015250624008306053589760129404161499245950409719573230009837256554261*z[1]^2*z[2]^3-0.1223143894114524607489420394380687624790983877267911600494585623844506143846541529537044360580205611e-1*z[1]*z[2]^5-0.3710935861799355651056240204460950464785736865427876714395704912593178515500966647903071695661527824e-1*z[1]^2*z[2]^4-0.2280041301979326210841123196480819523151481569016480839659853006921550330689288316561184810174782099e-1*z[1]^5*z[2]-.2281646104000712986013659271353573761360578868213345374013416955141694156408100125489532816328121968*z[1]^4*z[2]^2+.2553522894497913318719724119321340318650221180271769999827220905123752376294715741657860356697464936*z[1]^3*z[2]^3-0.2100454968368106452043796599355965806032461382313814986511675617921089523584619489639117756547555427e-1*z[1]^3*z[2]^4+0.1783017860425611435456855465308811505185128410779446404997513970903133571843394104351214154378666508e-1*z[1]^2*z[2]^5-0.1334879396969236300811370691064752780323732961889868989021161053931563636739888832944410980190940188e-2*z[1]*z[2]^6+0.3661847602125637114221459379587108471167275782980273719396987343590824220470010451327365496266283270e-4*z[1]*z[2]^7+0.3899361789928459234074176907040628912550484582958485401879466417078793417619205217836163560290244078e-4*z[1]^2*z[2]^6-0.2026348182772347074911625742043370407003536638641697884947591851080889373584332011836838054394837444e-2*z[1]^3*z[2]^5-0.2974343924456170952022225799502029264439183903898180372731336897459679226450110685010877785884894683e-1*z[1]^4*z[2]^3+0.3795727103140274624721060133526401673946917292294240289198077818242809138667096808483890447848687382e-1*z[1]^5*z[2]^2+.5643461683645467912524837514370788909297361783790712845825303336170699201563809508265053976386757666*z[1]*z[2]^3-2.746396150021966647117324625294840718670498541777271050395582161025714330571219001227827340394871083*z[1]^3*z[2]-.2166830763696989192335286623921994890497021933903560645267862081187481856001665765224541745522189565*z[2]^4-0.3456991330712193215177466567287426787782122011983159227043924052624803753381922230351672236793190840e-1*z[2]^5+.6597751042115838843402489237686100942687881345550570663791732607281796636261431554292610602773805150*z[1]^2*z[2]^2+5.803341552489744967452694857032628426686835288437287545522664869864284317090736151566930428817738503*z[1]^2*z[2]+5.022423194801684390171391247861480432873807650153908381267041247591490754420147809834824562887043383*z[1]^2+1.323051551512387839552645480177112464592164211970093731630502652190212357726891168871671566501816862*z[2]^2-0.3807862560811829734337373032490980100793664012525591588443141225869816595403247921287119694275344594e-1*z[2]^3-.3602650397009285460761608484896709092912704600231363969814626313247841661291837532632641939480743612*z[1]^5+1.599201472290110594853790707811445519674552483493033111933010653761550142490805715458234852227007281*z[1]^4-3.797792338236018865673320946175046706712779561587017617568288399749267357906194142816493235351054061*z[1]^3-2.024431163913537510194373743189483263313812090201273786625349658981827086319100510638372033371078737*z[1]*z[2]^2);

 ui(5,"set_rescale");
 EH_atlas["set_rescale",F];

 ui(5,"Finding a_H");
 EH_atlas["find_a_H"];

 set_a_H0(EH_atlas["a_H"]):

 ui(5,"Finding curve parameters");
 EH_atlas["find_u",cd];

 T[0] := [32/219, 23/64, 66/113, 129/157]:
 T[1] := [61/69, 16/25, 13/18, 89/110, 51/116, 35/69, 95/164, 31/113, 52/157, 
	  61/156, 26/983, 26/331, 117/901, 33/182, 83/355, 29/691]:
 T[3] := [29/36, 75/83, 61/99, 123/175, 103/231, 47/90, 23/64, 35/167,
          67/244, 5/39, 31/676]:
 T[5] := [22/491, 131/1201, 73/409, 43/176, 61/189, 89/217, 115/234,
          250/417, 75/104, 163/198, 129/134]:

 S :=[[16/333, 5/456], [62/135, 9/1724], [49/166, 88/2933], [39/271, 23/279],
      [17/465, 49/292], [40/49, 7/2145], [308/431, 6/337], [122/209, 25/493],
      [43/100, 20/183], [269/999, 39/196], [34/269, 17/53], [27/919, 113/241],
      [53/55, 3/1237], [53/57, 17/1588], [71/81, 127/4254], [95/119, 41/620],
      [110/159, 49/388], [77/138, 49/227], [32/79, 35/104], [1164/4657, 44/91],
      [32/277, 67/104], [19/730, 155/194], [2312/2313, 1/6762], [420/421, 3/2252],
      [127/128, 1/185], [101/103, 8/521], [93/97, 6/169], [59/64, 76/1063],
      [83/96, 24/185], [147/188, 19/88], [84/125, 143/430], [50/93, 271/569],
      [47/121, 75/118], [331/1379, 53/67], [91/810, 56/61], [19/723, 108/109],
      [2621/2622, 9/2018], [415/416, 7/517], [121/122, 3/94], [47/48, 9/139],
      [150/157, 13/110], [76/83, 68/343], [53/62, 96/311], [10/13, 30/67],
      [27/41, 103/170], [39/74, 13/17], [71/185, 107/119], [68/281, 59/60],
      [570/571, 28/603], [132/133, 35/379], [47/48, 98/599], [83/87, 191/720],
      [114/125, 39/98], [45/53, 66/119], [129/169, 74/103], [59/90, 109/126],
      [44/83, 29/30], [1321/1322, 15/131], [169/170, 52/255], [51/52, 52/159],
      [127/133, 133/277], [83/91, 63/97], [147/173, 73/90], [56/73, 73/78],
      [272/273, 45/118], [61/62, 57/103], [254/265, 125/171], [232/253, 53/60],
      [133/155, 47/48], [688/689, 137/222], [83/84, 231/289], [82/85, 133/142],
      [134/135, 71/73]]:

 E := [[  0, 18],[  0, 23],[  0, 35],[  1,  7],[  1, 25],[  1, 81],[  2,  4],[  2,  8],
       [  2, 46],[  3, 34],[  3, 45],[  4,  5],[  4, 46],[  4, 50],[  5,  6],[  5, 50],
       [  5, 57],[  6,  7],[  6, 57],[  6, 67],[  7, 67],[  7, 81],[  8, 11],[  8, 46],
       [  9, 10],[  9, 14],[  9, 47],[ 10, 11],[ 10, 47],[ 10, 48],[ 11, 46],[ 11, 48],
       [ 11, 49],[ 12, 13],[ 12, 17],[ 12, 51],[ 13, 14],[ 13, 51],[ 13, 52],[ 14, 47],
       [ 14, 52],[ 14, 53],[ 15, 16],[ 15, 22],[ 15, 58],[ 16, 17],[ 16, 58],[ 16, 59],
       [ 17, 51],[ 17, 59],[ 17, 60],[ 18, 19],[ 18, 23],[ 19, 20],[ 19, 23],[ 19, 68],
       [ 20, 21],[ 20, 68],[ 20, 69],[ 21, 22],[ 21, 69],[ 21, 70],[ 22, 58],[ 22, 70],
       [ 22, 71],[ 23, 35],[ 23, 36],[ 23, 68],[ 24, 25],[ 24, 27],[ 24, 80],[ 24, 81],
       [ 24, 93],[ 25, 81],[ 26, 27],[ 26, 29],[ 26, 92],[ 26, 93],[ 26,102],[ 27, 93],
       [ 28, 29],[ 28, 30],[ 28,101],[ 28,102],[ 28,109],[ 29,102],[ 30, 32],[ 30,109],
       [ 30,114],[ 31, 32],[ 31, 33],[ 31,113],[ 31,114],[ 31,117],[ 32,114],[ 33, 34],
       [ 33,117],[ 33,118],[ 34, 45],[ 34,118],[ 35, 36],[ 36, 37],[ 36, 68],[ 36, 82],
       [ 37, 38],[ 37, 82],[ 38, 39],[ 38, 82],[ 38, 83],[ 38, 94],[ 39, 40],[ 39, 94],
       [ 39,103],[ 40, 41],[ 40,103],[ 41, 42],[ 41,103],[ 41,104],[ 41,110],[ 42, 43],
       [ 42,110],[ 42,115],[ 43, 44],[ 43,115],[ 44, 45],[ 44,115],[ 44,116],[ 44,118],
       [ 45,118],[ 46, 49],[ 46, 50],[ 47, 48],[ 47, 53],[ 47, 54],[ 48, 49],[ 48, 54],
       [ 48, 55],[ 49, 50],[ 49, 55],[ 49, 56],[ 50, 56],[ 50, 57],[ 51, 52],[ 51, 60],
       [ 51, 61],[ 52, 53],[ 52, 61],[ 52, 62],[ 53, 54],[ 53, 62],[ 53, 63],[ 54, 55],
       [ 54, 63],[ 54, 64],[ 55, 56],[ 55, 64],[ 55, 65],[ 56, 57],[ 56, 65],[ 56, 66],
       [ 57, 66],[ 57, 67],[ 58, 59],[ 58, 71],[ 58, 72],[ 59, 60],[ 59, 72],[ 59, 73],
       [ 60, 61],[ 60, 73],[ 60, 74],[ 61, 62],[ 61, 74],[ 61, 75],[ 62, 63],[ 62, 75],
       [ 62, 76],[ 63, 64],[ 63, 76],[ 63, 77],[ 64, 65],[ 64, 77],[ 64, 78],[ 65, 66],
       [ 65, 78],[ 65, 79],[ 66, 67],[ 66, 79],[ 66, 80],[ 67, 80],[ 67, 81],[ 68, 69],
       [ 68, 82],[ 69, 70],[ 69, 82],[ 69, 83],[ 70, 71],[ 70, 83],[ 70, 84],[ 71, 72],
       [ 71, 84],[ 71, 85],[ 72, 73],[ 72, 85],[ 72, 86],[ 73, 74],[ 73, 86],[ 73, 87],
       [ 74, 75],[ 74, 87],[ 74, 88],[ 75, 76],[ 75, 88],[ 75, 89],[ 76, 77],[ 76, 89],
       [ 76, 90],[ 77, 78],[ 77, 90],[ 77, 91],[ 78, 79],[ 78, 91],[ 78, 92],[ 79, 80],
       [ 79, 92],[ 79, 93],[ 80, 81],[ 80, 93],[ 82, 83],[ 83, 84],[ 83, 94],[ 84, 85],
       [ 84, 94],[ 84, 95],[ 85, 86],[ 85, 95],[ 85, 96],[ 86, 87],[ 86, 96],[ 86, 97],
       [ 87, 88],[ 87, 97],[ 87, 98],[ 88, 89],[ 88, 98],[ 88, 99],[ 89, 90],[ 89, 99],
       [ 89,100],[ 90, 91],[ 90,100],[ 90,101],[ 91, 92],[ 91,101],[ 91,102],[ 92, 93],
       [ 92,102],[ 94, 95],[ 94,103],[ 95, 96],[ 95,103],[ 95,104],[ 96, 97],[ 96,104],
       [ 96,105],[ 97, 98],[ 97,105],[ 97,106],[ 98, 99],[ 98,106],[ 98,107],[ 99,100],
       [ 99,107],[ 99,108],[100,101],[100,108],[100,109],[101,102],[101,109],[103,104],
       [104,105],[104,110],[105,106],[105,110],[105,111],[106,107],[106,111],[106,112],
       [107,108],[107,112],[107,113],[108,109],[108,113],[108,114],[109,114],[110,111],
       [110,115],[111,112],[111,115],[111,116],[112,113],[112,116],[112,117],[113,114],
       [113,117],[115,116],[116,117],[116,118],[117,118]]:

 EH_atlas["num_charts"] := 0;
 EH_atlas["charts"] := table():

 ui(5,"Adding vertex charts");

 EH_atlas["add_vertex_chart",0 ,d];
 EH_atlas["add_vertex_chart",3 ,d];
 EH_atlas["add_vertex_chart",6 ,d];
 EH_atlas["add_vertex_chart",11,d];

 for k in [0,1,3,5] do
  ui(6,sprintf("Adding charts on curve %d",k));
  a,b := op(evalf(F16_curve_limits[k]));
  for t in T[k] do
   EH_atlas["add_curve_chart",k,a + t*(b-a),d];
  od;
 od;

 ui(5,"Adding inner charts");

 i := 0;
 for s in S do
  EH_atlas["add_centre_chart",evalf(t_lift(s)),d];
  i := i+1;
  if mods(i,10) = 0 then
   ui(6,sprintf("%d inner charts added",i));
  fi;
 od;

 ui(5,"Adding edges");
 for e in E do EH_atlas["add_edge",op(e)]; od;
end:

build_data["EH_atlas",3] := proc()
 local S,T,E,d,a,b,i,j,k,s,t,e,nH,nD,rD;
 global EH_atlas;

 if toy_version then
  nH := 50;
  nD := 25;
  rD := 0.8;
 else
  nH := 50;
  nD := 25;
  rD := 0.8;
 fi;

 ui(5,"set_beta_approx");
 EH_atlas["set_beta_approx"]:

 ui(5,"set_edge_lengths");
 EH_atlas["set_edge_lengths"]:

 ui(5,"optimize_beta");
 EH_atlas["optimize_beta"];

 ui(5,"make_H_samples");
 EH_atlas["make_H_samples",nH]:

 ui(5,"make_D_samples");
 EH_atlas["make_D_samples",nD,rD]:

 ui(5,"make_H_samples_q");
 EH_atlas["make_H_samples_q"]:

 ui(5,"make_D_samples_q");
 EH_atlas["make_D_samples_q"]:

 NULL;
end:

build_data["EH_atlas",4] := proc()
 local rq,kq,nq,d1,d2,d3;

 if toy_version then
  rq := 0.8;
  kq := 16;
  nq := 6;
  d1 := 6;
  d2 := 10;
  d3 := 6;
 else
  rq := 0.9;
  kq := 32;
  nq := 12;
  d1 := 6;
  d2 := 16;
  d3 := 8;
 fi;
 
 ui(5,"set_q_approx_fourier");
 EH_atlas["set_q_approx_fourier",rq,kq,nq];

 ui(5,"set_square_q_inv_a");
 EH_atlas["set_square_q_inv_a",d1];

 ui(5,"set_square_q_inv_b");
 EH_atlas["set_square_q_inv_b",d2,d3];

 ui(5,"set_chart_dist");
 EH_atlas["set_chart_dist"];

 NULL;
end:

##################################################

save_data["EH_atlas"] := proc()
 if not(assigned(EH_atlas)) then
  error("EH_atlas is not set");
 fi;
 make_save_dir();
 save(EH_atlas,  
      cat(save_dir,"/embedded/roothalf/EH_atlas.m"));
end:

load_data["EH_atlas"] := proc()
 read(cat(save_dir,"/embedded/roothalf/EH_atlas.m"));
 if type([EH_atlas["a_H"]],[RR0]) then
  set_a_H0(EH_atlas["a_H"]):
 fi;
end:

######################################################################

build_data["H_to_P_map"] := proc()
 local ns,pd,mr,md,mn;
 global H_to_P_map;

 if toy_version then
  ns := 100;
  pd := 20;
  mr := 0.7;
  md := 100;
  mn := 10;
 else
  ns := 100;
  pd := 20;
  mr := 0.8;
  md := 100;
  mn := 10;
 fi;

 ui(5,"Creating map H -> P");

 set_a_H0(EH_atlas["a_H"]):

 HP_table["add_a_H",a_H0]:
 H_to_P_map := eval(HP_table["H_to_P_maps"][a_H0]):
 H_to_P_map["make_samples",ns]:
 H_to_P_map["set_poly_deg",pd]:

 ui(6,"Finding p_1");
 H_to_P_map["find_p1"]:

 ui(6,"Finding p_1 inverse");
 H_to_P_map["set_p1_inv"];

 ui(6,"Finding m");
 H_to_P_map["find_m_series" ,mr,md,mn]:

 ui(6,"Finding mp");
 H_to_P_map["find_mp_series",mr,md,mn]:

 ui(6,"Finding p");
 H_to_P_map["find_p_series" ,mr,md,mn]:

 NULL;
end:

##################################################

save_data["H_to_P_map"] := proc()
 if not(assigned(H_to_P_map)) then
  error("H_to_P_map is not set");
 fi;
 make_save_dir();
 save(H_to_P_map,  
      cat(save_dir,"/hyperbolic/H_to_P_map.m"));
end:

load_data["H_to_P_map"] := proc()
 read(cat(save_dir,"/hyperbolic/H_to_P_map.m"));
end:

######################################################################

build_data["P_to_H_map"] := proc()
 global P_to_H_map;

 ui(5,"Creating map P -> H");

 set_a_P0(H_to_P_map["a_P"]);
 P_to_H_map := `new/P_to_H_map`():
 P_to_H_map["degree"] := 100;
 P_to_H_map["set_a_P",a_P0];

 ui(6,"Adding charts");
 P_to_H_map["add_charts"];

 ui(6,"Finding p_1 inverse");
 P_to_H_map["find_p1_inv"];

 NULL;
end:

##################################################

save_data["P_to_H_map"] := proc()
 if not(assigned(P_to_H_map)) then
  error("P_to_H_map is not set");
 fi;
 make_save_dir();
 save(P_to_H_map,
      cat(save_dir,"/hyperbolic/P_to_H_map.m"));
end:

load_data["P_to_H_map"] := proc()
 read(cat(save_dir,"/hyperbolic/P_to_H_map.m"));
end:

######################################################################

build_data["E_to_S_map"] := proc()
 global E_to_S_map,EH_atlas;

 ui(5,"Creating map E -> S");

 EH_atlas["H_to_P_map"] := eval(H_to_P_map):
 EH_atlas["P_to_H_map"] := eval(P_to_H_map):

 E_to_S_map := `new/E_to_S_map`():

 ui(6,"Finding p");
 E_to_S_map["find_p",EH_atlas]:

 NULL;
end:

##################################################

save_data["E_to_S_map"] := proc()
 if not(assigned(E_to_S_map)) then
  error("E_to_S_map is not set");
 fi;
 make_save_dir();
 save(E_to_S_map,
      cat(save_dir,"/embedded/roothalf/E_to_S_map.m"));
end:

load_data["E_to_S_map"] := proc()
 read(cat(save_dir,"/embedded/roothalf/E_to_S_map.m"));
end:

######################################################################

build_data["all"] := proc()
 ui(5,"Building all data");
 build_data["HP_table"]();
 build_data["triangle_quadrature_rule"]();
 build_data["grid"]();
 build_data["E_quadrature_rule"]();
 build_data["square_diffeo"]();
 build_data["EH_atlas",1]();
 build_data["EH_atlas",2]();
 build_data["EH_atlas",3]();
 build_data["EH_atlas",4]();
 build_data["H_to_P_map"]();
 build_data["P_to_H_map"]();
 build_data["E_to_S_map"]();
end:

save_data["all"] := proc()
 ui(5,"Saving all data");
 save_data["HP_table"]();
 save_data["triangle_quadrature_rule"]();
 save_data["grid"]();
 save_data["E_quadrature_rule"]();
 save_data["square_diffeo"]();
 save_data["EH_atlas"]();
 save_data["H_to_P_map"]();
 save_data["P_to_H_map"]();
 save_data["E_to_S_map"]();
end:

load_data["all"] := proc()
 ui(5,"Loading all data");
 load_data["HP_table"]();
 load_data["triangle_quadrature_rule"]();
 load_data["grid"]();
 load_data["E_quadrature_rule"]();
 load_data["square_diffeo"]();
 load_data["EH_atlas"]();
 load_data["H_to_P_map"]();
 load_data["P_to_H_map"]();
 load_data["E_to_S_map"]();
end:

